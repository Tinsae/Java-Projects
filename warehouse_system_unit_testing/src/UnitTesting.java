import static org.junit.Assert.*;
import org.junit.Test;

//IMPORTANT! Do NOT EDIT this file

public class UnitTesting 
{
	@Test // 20 MARKS
	public void testWarehouseAddProduct() 
	{
		Warehouse w = new Warehouse();
		assertEquals(0, w.numberOfProducts());
		
		w.add(product("Apple", 1000));
		w.add(product("Apple", 3));
		w.add(product("Apple", 90));
		w.add(product("Apple", 50));
		assertEquals(1, w.numberOfProducts());
		
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));
		
		assertEquals(2, w.numberOfProducts());
		
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		
		assertEquals(3, w.numberOfProducts());
	}
	
	@Test // 10 MARKS
	public void testWarehouseGetProduct() 
	{
		Warehouse w = new Warehouse();
		
		w.add(product("Apple", 1000));
		w.add(product("Apple", 3));
		w.add(product("Apple", 90));
		w.add(product("Apple", 50));
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));	
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		
		assertEquals(null, w.getProduct(-100));
		assertEquals(null, w.getProduct(3));
		
		assertTrue(compare(product("Apple"), w.getProduct(0)));
		assertTrue(compare(product("Pear"), w.getProduct(1)));
		assertTrue(compare(product("Banana"), w.getProduct(2)));
	}
	
	@Test // 10 MARKS
	public void testWarehouseCountProduct() 
	{
		Warehouse w = new Warehouse();	
		w.add(product("Apple", 1000));
		assertEquals(1000, w.count(product("Apple")));
		w.add(product("Apple", 3));
		w.add(product("Apple", 90));
		assertEquals(1000+3+90, w.count(product("Apple")));
		w.add(product("Apple", 50));
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		assertEquals(12, w.count(product("Pear")));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		
		assertEquals(1000+3+90+50, 
				     w.count(product("Apple")));
		assertEquals(10+2+5+23, 
			         w.count(product("Pear")));
		assertEquals(23+32, 
			         w.count(product("Banana")));
	}
	
	@Test // 20 MARKS
	public void testWarehouseRemoveProduct() 
	{
		Warehouse w = new Warehouse();	
		w.add(product("Apple", 1000));
		
		w.add(product("Apple", 3));
		w.add(product("Apple", 90));
		
		w.add(product("Apple", 50));
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		
		assertEquals(1000+3+90+50, w.count(product("Apple")));
		w.remove(product("Apple", 53));
		assertEquals(1000+90, w.count(product("Apple")));
		
		w.remove(product("Banana")); // remove 0, count remains the same.
		assertEquals(23+32, w.count(product("Banana")));
		
		w.remove(product("Banana", 3));
		assertEquals(20+32, w.count(product("Banana")));
		
		w.remove(product("apple", 53)); // does not exist
		assertEquals(1000+90, w.count(product("Apple")));
		
		assertEquals(10+2+5+23, w.count(product("Pear")));
		w.remove(product("Pear", 10+2+5+23)); // remove all
		assertEquals(2, w.numberOfProducts());
		
		w.remove(product("Apple", 2000)); // remove all
		assertEquals(1, w.numberOfProducts());
		
		w.remove(product("Banana", 9999)); // remove all
		assertEquals(0, w.numberOfProducts());
	}
	
	@Test // 20 MARKS
	public void testListProductByName() 
	{
		Warehouse w = new Warehouse();	
		w.add(product("Apple", 1000));
		w.add(product("Apple", 3));
		w.add(product("Pineapple", 29));
		w.add(product("Apple", 90));
		w.add(product("Apple", 50));
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Custard apple", 3));
		
		Product[] app = {product("Apple"),
				         product("Pineapple"),
				         product("Custard apple")};
		
		assertTrue(compare(app, WarehouseServices.listProductByName(w, "app")));
		assertTrue(compare(app, WarehouseServices.listProductByName(w, "APP")));
		assertTrue(compare(app, WarehouseServices.listProductByName(w, "aPp")));
		assertFalse(compare(app, WarehouseServices.listProductByName(w, "date")));
		
		Product[] a = {product("Apple"), product("Pineapple"), 
				       product("Pear"), product("Banana"), product("Avocado"), 
				       product("Date"), product("Blackberry"), product("Custard apple")};
		
		assertTrue(compare(a, WarehouseServices.listProductByName(w, "a")));
		assertTrue(compare(a, WarehouseServices.listProductByName(w, "A")));
		
	    Product[] fi = {product("Fig")};
	    assertTrue(compare(fi, WarehouseServices.listProductByName(w, "fi")));
	    assertTrue(compare(fi, WarehouseServices.listProductByName(w, "fI")));
	    assertTrue(compare(fi, WarehouseServices.listProductByName(w, "Fi")));
	    assertTrue(compare(fi, WarehouseServices.listProductByName(w, "F")));
	    
	    Product[] er = {product("Blueberry"), product("Blackberry")};
	    assertTrue(compare(er, WarehouseServices.listProductByName(w, "eR")));
	    assertTrue(compare(er, WarehouseServices.listProductByName(w, "Er")));
	    assertTrue(compare(er, WarehouseServices.listProductByName(w, "ER")));
	    
	    Product[] ea = {product("Pineapple"), product("Pear")};
	    assertTrue(compare(ea, WarehouseServices.listProductByName(w, "eA")));
	    assertTrue(compare(ea, WarehouseServices.listProductByName(w, "Ea")));
	    assertTrue(compare(ea, WarehouseServices.listProductByName(w, "EA")));
	}
	
	@Test // 5 MARKS
	public void testGetSortedProductByNameAscending()
	{
		Warehouse w = new Warehouse();	
		w.add(product("Apple", 1000));
		w.add(product("Apple", 3));
		w.add(product("Pineapple", 29));
		w.add(product("Apple", 90));
		w.add(product("Apple", 50));
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Custard apple", 3));
		
		Product[] p = {product("Apple",1143), product("Avocado",100), product("Banana",174), 
				       product("Blackberry",100), product("Blueberry",4), product("Custard apple",3), 
				       product("Date",10), product("Fig",46), product("Kiwi",46), product("Pear",40), 
				       product("Pineapple",29)};
		
		assertTrue(compare(p, WarehouseServices.getSortedProduct(w, 0, true)));
	}
	
	@Test // 5 MARKS
	public void testGetSortedProductByNameDescending()
	{
		Warehouse w = new Warehouse();	
		w.add(product("Apple", 1000));
		w.add(product("Apple", 3));
		w.add(product("Pineapple", 29));
		w.add(product("Apple", 90));
		w.add(product("Apple", 50));
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Custard apple", 3));
		
		Product[] p = {product("Pineapple",29), product("Pear",40), product("Kiwi",46), 
				       product("Fig",46), product("Date",10), product("Custard apple",3), 
				       product("Blueberry",4), product("Blackberry",100), product("Banana",174), 
				       product("Avocado",100), product("Apple",1143)};
		
		assertTrue(compare(p, WarehouseServices.getSortedProduct(w, 0, false)));
	}
	
	@Test // 5 MARKS
	public void testGetSortedProductByCountAscending()
	{
		Warehouse w = new Warehouse();	
		w.add(product("Apple", 1000));
		w.add(product("Apple", 3));
		w.add(product("Pineapple", 29));
		w.add(product("Apple", 90));
		w.add(product("Apple", 50));
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Custard apple", 3));
		
		Product[] p = {product("Custard apple",3), product("Blueberry",4), 
				       product("Date",10), product("Pineapple",29), 
				       product("Pear",40), product("Fig",46), 
				       product("Kiwi",46), product("Avocado",100), 
				       product("Blackberry",100), product("Banana",174), 
				       product("Apple",1143)};
		
		assertTrue(compare(p, WarehouseServices.getSortedProduct(w, 1, true)));
	}
	
	@Test // 5 MARKS
	public void testGetSortedProductByCountDescending()
	{
		Warehouse w = new Warehouse();	
		w.add(product("Apple", 1000));
		w.add(product("Apple", 3));
		w.add(product("Pineapple", 29));
		w.add(product("Apple", 90));
		w.add(product("Apple", 50));
		w.add(product("Pear", 10));
		w.add(product("Pear", 2));
		w.add(product("Pear", 5));
		w.add(product("Pear", 23));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Banana", 23));
		w.add(product("Banana", 32));
		w.add(product("Avocado", 50));
		w.add(product("Blueberry", 2));
		w.add(product("Date", 5));
		w.add(product("Fig", 23));
		w.add(product("Kiwi", 23));
		w.add(product("Banana", 32));
		w.add(product("Blackberry", 50));
		w.add(product("Custard apple", 3));
		
		Product[] p = {product("Apple",1143), product("Banana",174), 
				       product("Avocado",100), product("Blackberry",100), 
				       product("Fig",46), product("Kiwi",46), 
				       product("Pear",40), product("Pineapple",29), 
				       product("Date",10), product("Blueberry",4), product("Custard apple",3)};
		
		assertTrue(compare(p, WarehouseServices.getSortedProduct(w, 1, false)));
	}
	
	/////////////////////////////////
	//// AUX methods
	
	public Product product(String name, int count)
	{
		return new Product(name, count);
	}
	
	public Product product(String name)
	{
		return new Product(name);
	}
	
	public boolean compare(Product a, Product b)
	{
		return a.getName().compareTo(b.getName()) == 0;
	}
	
	public boolean compare(Product[] a, Product[] b)
	{
		if(a.length != b.length)
			return false;
		else
		{
			for(int i = 0; i < a.length; i = i + 1)
			{
				if(false == compare(a[i], b[i]))
					return false;
			}
			return true;
		}
	}
	
	public boolean compareDeepCopy(Warehouse a, Warehouse b)
	{
		if(a == b || a.numberOfProducts() != b.numberOfProducts())
			return false;
		else
		{
			for(int i = 0; i < a.numberOfProducts(); i = i + 1)
				if(a.getProduct(i) == b.getProduct(i) || 
				   false == compare(a.getProduct(i), b.getProduct(i)))
				{	
				    return false;
				}
			return true;	
		}	
	}
	
}
